package require tcldbf
package require tcltest
namespace import ::tcltest::*

# NOTE: tcltest 2.2 does not use "-encoding utf-8" in the multiproc mode via runAllTests
testConstraint tcltestEncodingBug [expr {[configure -singleproc] || [testConstraint macOrUnix]}]
testConstraint tcltestEncodingBug true
testConstraint utf8 [expr {[encoding system] eq "utf-8"}]

###

set simple_struct {
   {F1 Logical L 1 0}
   {F2 Date D 8 0}
   {F3 String C 10 0}
   {F4 Integer N 9 0}
   {F5 Double N 15 2}
}

set simple_data {
   {T 20241231 {New Year 0} 1230 456.70}
   {F 20250101 {New Year 1} 1231 456.71}
}

set numeric_struct {
   {F1 Integer N 9 0}
   {F2 Integer N 15 0}
   {F3 Integer N 18 0}
   {F4 Double N 16 2}
   {F5 Double N 19 2}
}

set numeric_data0 {{0 0 0 0.00 0.00}}
set numeric_data1 {{987654321 543210987654321 543210987654321 5432109876543.21 5432109876543.21}}
set numeric_data2 {{-87654321 -43210987654321 -43210987654321 -432109876543.21 -432109876543.21}}
set numeric_data3 {{987654321 543210987654321 876543210987654321 5432109876543.21 8765432109876543.21}}
set numeric_data4 {{-87654321 -43210987654321 -76543210987654321 -432109876543.21 -765432109876543.21}}

proc dbf_create {filename struct args} {
   dbf dbf -create $filename {*}$args
   foreach l $struct {
       lassign $l l - t w p
       $dbf add $l $t $w $p
   }
   $dbf forget
}

proc dbf_create_open {filename struct args} {
   dbf_create $filename $struct {*}$args
   dbf dbf -open $filename
}

proc dbf_insert {dbf data} {
   foreach l $data {
      $dbf insert end {*}$l
   }
}

# add fields

test command-3.2.0.0 {create/setup syntax error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d add
} -result {wrong # args: should be "dbf.???? add <label> type|nativetype <width> ?prec?"} -match glob

test command-3.2.0.1 {create/setup syntax error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d add X X
} -result {wrong # args: should be "dbf.???? add <label> type|nativetype <width> ?prec?"} -match glob

test command-3.2.0.2 {create/setup error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d add X X 1
} -result {invalid type, field X}

test command-3.2.0.3 {create/setup error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d add S C 256
} -result {invalid width, field S}

test command-3.2.0.4 {create/setup error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d add N N 2 1
} -result {invalid precision, field N}

test command-3.2.0.5 {create/setup error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d add N N 2 x
} -result {expected integer but got "x" in place of precision, field N}

test command-3.2.0.6 {create/setup error} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   for {set i 0} {$i <= 256} {incr i} {
      $d add S$i C 255
   }
} -result {Cannot add field S256. Record length limit reached (max 65535 bytes).}

test command-3.2.0.7 {fields syntax} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d fields foo bar
} -result {wrong # args: should be "dbf.???? fields foo"} -match glob

test command-3.2.0.8 {field unknows} -returnCodes 1 -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d fields foo
} -result {unknown field foo}

test command-3.2.1 {create/setup} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list \
         [$d add F1 L 1] \
         [$d add F2 D 8] \
         [$d add F3 C 10] \
         [$d add F4 N 10] \
         [$d add F5 N 10 2]
} -result {0 1 2 3 4}

test command-3.2.2 {create/setup/open/field} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $simple_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   unset -nocomplain f l
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   set l {}
   foreach f $simple_struct {
       lappend l [$d fields [lindex $f 0]]
   }
   set l
} -result [lrange $simple_struct 0 end]

test command-3.2.3 {create/setup/open/fields} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $simple_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d fields
} -result [lrange $simple_struct 0 end]

test command-3.2.4 {invalid info} -returnCodes 1 -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $simple_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d info foo
} -result {wrong # args: should be "dbf.???? info ?records|fields?"} -match glob

test command-3.2.5 {info default} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $simple_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d info
} -result [list 0 [llength $simple_struct]]

test command-3.2.6 {info option} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $simple_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d info records] [$d info fields]
} -result [list 0 [llength $simple_struct]]

# insert

test command-4.0.0 {create/setup/open/insert past end} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 1 {foo}
} -result {invalid rowid 1}

test command-4.0.1 {create/setup/open/insert many values} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {foo} {bar}
} -result {too many values}

test command-4.0.2 {create/setup/open/insert invalid number} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{I - N 9 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {foo}
} -result {expected integer but got "foo", field I row 0}

test command-4.0.3 {create/setup/open/insert invalid number} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{F - N 10 2}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {foo}
} -result {expected floating-point number but got "foo", field F row 0}

test command-4.0.4 {create/setup/open/insert invalid date} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{D - D 8 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {foo}
} -result {expected date as YYYYMMDD but got "foo", field D row 0}

test command-4.0.5 {create/setup/open/insert invalid logical} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{L - L 1 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end X
} -result {update error, field L row 0}

test command-4.0.10 {insert S too big} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert end {foofoofoofoo}] [$d record 0]
} -result {too long string value, field S row 0}

test command-4.0.11 {insert I too big} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{I - N 9 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {1234567890}
} -result {update error, field I row 0}

test command-4.0.12 {insert float too big} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{F - N 10 2}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {12345678901.23}
} -result {update error, field F row 0}

test command-4.0.13 {invalid date too big} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{D - D 8 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {99999999}
} -result {invalid date, field D row 0}

test command-4.0.14 {insert logical too long} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{L - L 1 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end TT
} -result {expected "T" or "F", field L row 0}

test command-4.0.20 {create/setup/open/insert invalid logical/record count} -constraints shapelibFeature -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{L - L 1 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   # NOTE: Insert error, but record added
   list [$d info] [catch {$d insert end X}] [$d info]
} -result {{0 1} 1 {0 1}}

test command-4.0.21 {create/setup/open ro/insert} -returnCodes 1 -constraints shapelibFeature -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf] -readonly
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   #
   # NOTE: Two asserts (msvc debug): "Flush between consecutive read and write", !stream.has_any_of(_IOREAD)
   # NOTE: No error at Tcl level
   # NOTE: Record not added 
   # 
   list [$d insert end {foo}] [$d info]
} -result {Failure writing DBF record 0.}

# info 

test command-4.1.0 {create/setup/open/insert} -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert end {foo}] [$d info]
} -result {0 {1 1}}

test command-4.1.1 {create/setup/open/insert twice} -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert end {foo}] [$d insert end {bar}] [$d info]
} -result {0 1 {2 1}}

test command-4.1.2 {create/setup/open/insert twice same rowid} -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 {foo}] [$d insert 0 {bar}] [$d info]
} -result {0 0 {1 1}}

# update

test command-4.2.1 {create/setup/open/update} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d update end S {foo}] [$d info]
} -result {0 {1 1}}

test command-4.2.2 {create/setup/open/update twice} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d update end S {foo}] [$d update end S {bar}] [$d info]
} -result {0 1 {2 1}}

# record

test command-4.3.0.0 {create/setup/open/insert/record} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d record
} -result {wrong # args: should be "dbf.???? record <rowid>"} -match glob

test command-4.3.0 {create/setup/open/insert/record} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 {foo}] [$d record 0]
} -result {0 foo}

test command-4.3.2 {create/setup/open/update/record} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d update 0 S {foo}] [$d record 0]
} -result {0 foo}

test command-4.3.3 {create/setup/open/insert two strings} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 foo bar] [$d record 0]
} -result {0 {foo bar}}

test command-4.3.4 {insert a string with two words} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 {foo bar}] [$d record 0]
} -result {0 {{foo bar} {}}}

test command-4.3.5 {insert a list with two strings} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 [list foo bar]] [$d record 0]
} -result {0 {foo bar}}

test command-4.3.6 {insert list and strings} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 [list foo bar] baz] [$d record 0]
} -result {0 {{foo bar} baz}}

test command-4.3.7 {empty list} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   list [$d insert 0 {}] [$d info]
} -result {0 {0 1}}

test command-4.3.8 {insert long record} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $simple_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   dbf_insert $d $simple_data
   list [$d record 0] [$d record 1]
} -result [lrange $simple_data 0 end]

test command-4.3.10 {insert numeric fields with 0} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $numeric_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   dbf_insert $d $numeric_data0
   $d record 0
} -result [lrange [lindex $numeric_data0 0] 0 end]

test command-4.3.11 {insert numeric fields 64bit precision} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $numeric_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   dbf_insert $d $numeric_data1
   $d record 0
} -result [lrange [lindex $numeric_data1 0] 0 end]

test command-4.3.12 {insert numeric fields 64bit precision negate} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $numeric_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   dbf_insert $d $numeric_data2
   $d record 0
} -result [lrange [lindex $numeric_data2 0] 0 end]

test command-4.3.13 {insert numeric fields 64bit precision negate} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $numeric_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   # NOTE: shapelib limits numerical precision to 15 digit on write
   dbf_insert $d $numeric_data3
   $d record 0
} -result [lrange [lindex $numeric_data3 0] 0 end]

test command-4.3.14 {insert numeric fields 64bit precision negate} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] $numeric_struct
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   # NOTE: shapelib limits numerical precision to 15 digit on write
   dbf_insert $d $numeric_data4
   $d record 0
} -result [lrange [lindex $numeric_data4 0] 0 end]

test command-4.3.15 {very long field} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 255
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 1
   $d record 0
} -result {1}

test command-4.3.16 {very long integer} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 255
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 [expr {"[string repeat 9876543210 25]12345"+0}]
   $d record 0
} -result [list [string repeat 9876543210 25]12345]

test command-4.3.17 {very long negative integer} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 255
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 [expr {"-[string repeat 9876543210 25]1234"+0}]
   $d record 0
} -result [list -[string repeat 9876543210 25]1234]

test command-4.3.18 {very long field} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 255 2
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 1
   $d record 0
} -result {1.00}

test command-4.3.20 {invalid long integers} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 16 0
} -cleanup {
   unset value result
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   set result \n
   foreach value {x 0x0 0.0 12345678901234567 -1234567890123456} {
      append result $value : [catch {$d insert end $value} message] = $message \n
   }
   set result
} -result {
x:1=invalid numeric value, field N row 0
0x0:1=invalid numeric value, field N row 0
0.0:1=invalid numeric value, field N row 0
12345678901234567:1=invalid numeric value, field N row 0
-1234567890123456:1=invalid numeric value, field N row 0
}

test command-4.3.21 {valid long integers} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 16 0
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end 0
   $d insert end 1
   $d insert end 1234567890123456
   $d insert end -123456789012345
   $d values N
} -result {0 1 1234567890123456 -123456789012345}

test command-4.3.22 {invalid long doubles} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 16 2
} -cleanup {
   unset value result
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   set result \n
   foreach value {x x.0 0.x 12345678901234.56 -1234567890123.45 12345678901234 -1234567890123} {
      append result $value : [catch {$d insert end $value} message] = $message \n
   }
   set result
} -result {
x:1=invalid numeric value, field N row 0
x.0:1=invalid numeric value, field N row 0
0.x:1=invalid numeric value, field N row 0
12345678901234.56:1=invalid numeric value, field N row 0
-1234567890123.45:1=invalid numeric value, field N row 0
12345678901234:1=invalid numeric value, field N row 0
-1234567890123:1=invalid numeric value, field N row 0
}

test command-4.3.23 {valid long doubles} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
   $d add N N 16 2
} -cleanup {
   $d forget; unset d; #file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end 0
   $d insert end 0.1
   $d insert end 0.12
   $d insert end 0.123
   $d insert end .123
   $d insert end 1234567890123.45
   $d insert end -123456789012.34
   $d insert end 1234567890123.456
   $d insert end -123456789012.345
   $d values N
} -result {0.00 0.10 0.12 0.12 0.12 1234567890123.45 -123456789012.34 1234567890123.45 -123456789012.34}

# get

test command-4.4.0 {get syntax} -returnCodes 1 -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 foo bar
   $d get 0 S1 S2
} -result {wrong # args: should be "dbf.???? get <rowid> ?label?"} -match glob

test command-4.4.1 {get invalid field} -returnCodes 1 -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 foo bar
   $d get 0 S3
} -result {unknown field S3}

test command-4.4.2 {get by field label} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 foo bar
   list [$d get 0 S1] [$d get 0 S2]
} -result {foo bar}

test command-4.4.3 {get dict} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S1 - C 10 0} {S2 - C 10 0}}
   dbf d -open [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert 0 foo bar
   $d get 0
} -result {S1 foo S2 bar}

# values

test command-4.5.0 {values syntax} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d values
} -result {wrong # args: should be "dbf.???? values <label>"} -match glob

test command-4.5.1 {values for unkfown} -returnCodes 1 -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d values foo
} -result {unknown field foo}

test command-4.5.1 {values} -setup {
   set d [dbf_create_open [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   $d insert end {foo}
   $d insert end {bar}
   $d values S
} -result {foo bar}

# deleted

test command-4.6.0 {deleted mark} -setup {
   dbf_create [file join [temporaryDirectory] test.dbf] {{S - C 10 0}}
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
   dbf d -open [file join [temporaryDirectory] test.dbf]
   $d insert 0 {foo}
   list [$d deleted 0] [$d deleted 0 true] [$d deleted 0] [$d deleted 0 false] [$d deleted 0]
} -result {0 1 1 0 0}

# codepage encoding

test command-4.7.0 {codepage} -constraints tcltestEncodingBug -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf] -codepage LDID/201
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
# 
# NOTE: tcltest 2.2.5 encoding bug in runAllProcs
#
   $d add S C 10
   $d insert 0 {Йцукенгшщз}
   list [$d codepage] [$d record 0]
} -result {LDID/201 Йцукенгшщз}

test command-4.7.1 {codepage/truncation} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf] -codepage LDID/201
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
# 
# NOTE: tcltest 2.2.5 encoding bug in runAllProcs
#
   $d add S C 10
   $d insert 0 {Йцукенгшщзх}
} -result {too long string value, field S row 0} -returnCodes 1

test command-4.7.2 {codepage/utf} -constraints {utf8 tcltestEncodingBug} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
# 
# NOTE: tcltest 2.2.5 encoding bug in runAllProcs
#
   $d add S C 10
   $d insert 0 {Йцуке}
   list [$d codepage] [$d record 0]
} -result {LDID/87 Йцуке}

test command-4.7.3 {codepage/utf truncated} -constraints {utf8 tcltestEncodingBug} -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf]
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
# 
# NOTE: tcltest 2.2.5 encoding bug in runAllProcs
#
   $d add S C 10
   $d insert 0 {Йцукен}
   list [$d codepage] [$d record 0]
} -result {too long string value, field S row 0} -returnCodes 1

test command-4.7.4 {codepage after open} -constraints tcltestEncodingBug -setup {
   dbf d -create [file join [temporaryDirectory] test.dbf] -codepage LDID/201
} -cleanup {
   $d forget; unset d; file delete [file join [temporaryDirectory] test.dbf]
} -body {
# 
# NOTE: tcltest 2.2.5 encoding bug in runAllProcs
#
   $d add S C 10
   $d insert 0 {Йцукенгшщз}
   $d forget
   dbf d -open [file join [temporaryDirectory] test.dbf]
   $d insert 1 {Йцукенгшщз}
   list [$d codepage] [$d record 0] [$d record 1]
} -result {LDID/201 Йцукенгшщз Йцукенгшщз}

cleanupTests
