diff -bur ./shapelib-orig/dbfopen.c ./shapelib/dbfopen.c
--- ./shapelib-orig/dbfopen.c	2025-07-27 14:00:39.172000000 +0300
+++ ./shapelib/dbfopen.c	2025-07-27 14:10:13.212159567 +0300
@@ -93,7 +93,7 @@
     /* -------------------------------------------------------------------- */
     /*      Initialize the file header information.                         */
     /* -------------------------------------------------------------------- */
-    abyHeader[0] = 0x03; /* memo field? - just copying */
+    abyHeader[0] = psDBF->nFileType; /* memo field? - just copying */
 
     /* write out update date */
     abyHeader[1] = STATIC_CAST(unsigned char, psDBF->nUpdateYearSince1900);
@@ -171,7 +171,7 @@
                     szMessage, sizeof(szMessage),
                     "Failure seeking to position before writing DBF record %d.",
                     psDBF->nCurrentRecord);
-                psDBF->sHooks.Error(szMessage);
+                psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
                 return false;
             }
         }
@@ -182,7 +182,7 @@
             char szMessage[128];
             snprintf(szMessage, sizeof(szMessage),
                      "Failure writing DBF record %d.", psDBF->nCurrentRecord);
-            psDBF->sHooks.Error(szMessage);
+            psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
             return false;
         }
 
@@ -225,7 +225,7 @@
             snprintf(szMessage, sizeof(szMessage),
                      "fseek(%ld) failed on DBF file.",
                      STATIC_CAST(long, nRecordOffset));
-            psDBF->sHooks.Error(szMessage);
+            psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
             return false;
         }
 
@@ -235,7 +235,7 @@
             char szMessage[128];
             snprintf(szMessage, sizeof(szMessage),
                      "fread(%d) failed on DBF file.", psDBF->nRecordLength);
-            psDBF->sHooks.Error(szMessage);
+            psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
             return false;
         }
 
@@ -370,16 +370,26 @@
         free(pszFullname);
         return SHPLIB_NULLPTR;
     }
-    psDBF->fp = psHooks->FOpen(pszFullname, pszAccess, psHooks->pvUserData);
+    psDBF->fp = psHooks->FOpen(
+        psHooks->bKeepFileExtension ? pszFilename : pszFullname,
+        pszAccess, psHooks->pvUserData);
     memcpy(&(psDBF->sHooks), psHooks, sizeof(SAHooks));
 
-    if (psDBF->fp == SHPLIB_NULLPTR)
+    if (psDBF->fp == SHPLIB_NULLPTR && !psHooks->bKeepFileExtension)
     {
         memcpy(pszFullname + nLenWithoutExtension, ".DBF", 5);
         psDBF->fp =
             psDBF->sHooks.FOpen(pszFullname, pszAccess, psHooks->pvUserData);
     }
 
+    memcpy(pszFullname + nLenWithoutExtension, ".dbt", 5);
+    SAFile pfDBT = psHooks->FOpen(pszFullname, "rb", psHooks->pvUserData);
+    if (pfDBT == SHPLIB_NULLPTR)
+    {
+        memcpy(pszFullname + nLenWithoutExtension, ".DBT", 5);
+        pfDBT = psHooks->FOpen(pszFullname, "rb", psHooks->pvUserData);
+    }
+
     memcpy(pszFullname + nLenWithoutExtension, ".cpg", 5);
     SAFile pfCPG = psHooks->FOpen(pszFullname, "r", psHooks->pvUserData);
     if (pfCPG == SHPLIB_NULLPTR)
@@ -393,11 +403,14 @@
     if (psDBF->fp == SHPLIB_NULLPTR)
     {
         free(psDBF);
+        if (pfDBT)
+            psHooks->FClose(pfDBT);
         if (pfCPG)
             psHooks->FClose(pfCPG);
         return SHPLIB_NULLPTR;
     }
 
+    psDBF->memofp = pfDBT;
     psDBF->bNoHeader = FALSE;
     psDBF->nCurrentRecord = -1;
     psDBF->bCurrentRecordModified = FALSE;
@@ -410,6 +423,8 @@
     if (!pabyBuf)
     {
         psDBF->sHooks.FClose(psDBF->fp);
+        if (psDBF->memofp)
+            psHooks->FClose(psDBF->memofp);
         if (pfCPG)
             psHooks->FClose(pfCPG);
         free(psDBF);
@@ -418,6 +433,8 @@
     if (psDBF->sHooks.FRead(pabyBuf, XBASE_FILEHDR_SZ, 1, psDBF->fp) != 1)
     {
         psDBF->sHooks.FClose(psDBF->fp);
+        if (psDBF->memofp)
+            psDBF->sHooks.FClose(psDBF->memofp);
         if (pfCPG)
             psDBF->sHooks.FClose(pfCPG);
         free(pabyBuf);
@@ -425,6 +442,24 @@
         return SHPLIB_NULLPTR;
     }
 
+    psDBF->nFileType = pabyBuf[0];
+    psDBF->nMemoBlockSize = 0;
+    if (psDBF->memofp) {
+        unsigned char buf[32];
+        if (psDBF->sHooks.FRead(buf, 32, 1, psDBF->memofp) == 1) {
+            if (psDBF->nFileType == 0x83) {
+                // FIXME: check if (buf[16] == 0 || buf[16] == 3) ?
+                psDBF->nMemoBlockSize = 512;
+            } else if (psDBF->nFileType == 0x8B && buf[16] == 0) {
+                psDBF->nMemoBlockSize = buf[20] | (buf[21] << 8);
+            }
+        }
+        if (psDBF->nMemoBlockSize == 0) {
+            psDBF->sHooks.FClose(psDBF->memofp);
+            psDBF->memofp = SHPLIB_NULLPTR;
+        }
+    }
+
     DBFSetLastModifiedDate(psDBF, pabyBuf[1], pabyBuf[2], pabyBuf[3]);
 
     psDBF->nRecords = pabyBuf[4] | (pabyBuf[5] << 8) | (pabyBuf[6] << 16) |
@@ -438,6 +473,8 @@
     if (psDBF->nRecordLength == 0 || nHeadLen < XBASE_FILEHDR_SZ)
     {
         psDBF->sHooks.FClose(psDBF->fp);
+        if (psDBF->memofp)
+            psDBF->sHooks.FClose(psDBF->memofp);
         if (pfCPG)
             psDBF->sHooks.FClose(pfCPG);
         free(pabyBuf);
@@ -453,6 +490,8 @@
     if (!psDBF->pszCurrentRecord)
     {
         psDBF->sHooks.FClose(psDBF->fp);
+        if (psDBF->memofp)
+            psDBF->sHooks.FClose(psDBF->memofp);
         if (pfCPG)
             psDBF->sHooks.FClose(pfCPG);
         free(pabyBuf);
@@ -499,6 +538,8 @@
     if (!pabyBufNew)
     {
         psDBF->sHooks.FClose(psDBF->fp);
+        if (psDBF->memofp)
+            psDBF->sHooks.FClose(psDBF->memofp);
         free(pabyBuf);
         free(psDBF->pszCurrentRecord);
         free(psDBF->pszCodePage);
@@ -513,6 +554,8 @@
                             psDBF->fp) != 1)
     {
         psDBF->sHooks.FClose(psDBF->fp);
+        if (psDBF->memofp)
+            psDBF->sHooks.FClose(psDBF->memofp);
         free(pabyBuf);
         free(psDBF->pszCurrentRecord);
         free(psDBF->pszCodePage);
@@ -616,6 +659,9 @@
     /* -------------------------------------------------------------------- */
     psDBF->sHooks.FClose(psDBF->fp);
 
+    if (psDBF->memofp)
+        psDBF->sHooks.FClose(psDBF->memofp);
+
     if (psDBF->panFieldOffset != SHPLIB_NULLPTR)
     {
         free(psDBF->panFieldOffset);
@@ -685,7 +731,9 @@
     /* -------------------------------------------------------------------- */
     /*      Create the file.                                                */
     /* -------------------------------------------------------------------- */
-    SAFile fp = psHooks->FOpen(pszFullname, "wb+", psHooks->pvUserData);
+    SAFile fp = psHooks->FOpen(
+         psHooks->bKeepFileExtension ? pszFilename : pszFullname,
+        "wb+", psHooks->pvUserData);
     if (fp == SHPLIB_NULLPTR)
     {
         const size_t nMessageLen = strlen(pszFullname) + 256;
@@ -694,7 +742,7 @@
         {
             snprintf(pszMessage, nMessageLen, "Failed to create file %s: %s",
                      pszFullname, strerror(errno));
-            psHooks->Error(pszMessage);
+            psHooks->Error(pszMessage, psHooks->pvUserData);
             free(pszMessage);
         }
 
@@ -741,6 +789,8 @@
 
     memcpy(&(psDBF->sHooks), psHooks, sizeof(SAHooks));
     psDBF->fp = fp;
+    psDBF->memofp = SHPLIB_NULLPTR;
+    psDBF->nFileType = 0x03;
     psDBF->nRecords = 0;
     psDBF->nFields = 0;
     psDBF->nRecordLength = 1;
@@ -842,7 +892,7 @@
                  "Cannot add field %s. Header length limit reached "
                  "(max 65535 bytes, 2046 fields).",
                  pszFieldName);
-        psDBF->sHooks.Error(szMessage);
+        psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
         return -1;
     }
 
@@ -862,7 +912,7 @@
                  "Cannot add field %s. Record length limit reached "
                  "(max 65535 bytes).",
                  pszFieldName);
-        psDBF->sHooks.Error(szMessage);
+        psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
         return -1;
     }
 
@@ -917,7 +967,7 @@
     if (!panFieldOffsetNew || !panFieldSizeNew || !panFieldDecimalsNew ||
         !pachFieldTypeNew || !pszHeaderNew || !pszCurrentRecordNew)
     {
-        psDBF->sHooks.Error("Out of memory");
+        psDBF->sHooks.Error("Out of memory", psDBF->sHooks.pvUserData);
         return -1;
     }
 
@@ -928,7 +978,7 @@
         pszRecord = STATIC_CAST(char *, malloc(psDBF->nRecordLength + nWidth));
         if (!pszRecord)
         {
-            psDBF->sHooks.Error("Out of memory");
+            psDBF->sHooks.Error("Out of memory", psDBF->sHooks.pvUserData);
             return -1;
         }
     }
@@ -1218,6 +1268,55 @@
 }
 
 /************************************************************************/
+/*                        DBFReadMemoAttribute()                        */
+/*                                                                      */
+/*      Read an memo attribute.                                      */
+/************************************************************************/
+
+SAOffset DBFReadMemoAttribute(DBFHandle psDBF, int iRecord, int iField,
+                         unsigned char * pszMemoBuffer, SAOffset nMemoBufferSize)
+{
+    const char *memoValue = STATIC_CAST(
+        const char *, DBFReadAttribute(psDBF, iRecord, iField, 'M'));
+    if (memoValue == NULL)
+        return 0;
+    int block = atoi(memoValue);
+    if (block == 0)
+        return 0;
+    if (block > 0 && psDBF->memofp) {
+        const SAOffset nMemoOffset = block * psDBF->nMemoBlockSize;
+        if (psDBF->sHooks.FSeek(psDBF->memofp, nMemoOffset, SEEK_SET) == 0) {
+            if (psDBF->nFileType == 0x83) {
+                SAOffset nReadSize =  psDBF->sHooks.FRead(pszMemoBuffer, 1,
+                                                          nMemoBufferSize, psDBF->memofp);
+                if (nReadSize >= 0) {
+                    int i = 0;
+                    // FIXME: check for second 0x1A (?)
+                    while (i < nReadSize && pszMemoBuffer[i] != 0x1A)
+                        i++;
+                    return i;
+                }
+            } else if (psDBF->nFileType == 0x8B) {
+                unsigned char u[8];
+                if (psDBF->sHooks.FRead(u, 8, 1, psDBF->memofp) == 1) {
+                    if (u[0] == 0xFF && u[1] == 0xFF && u[2] == 0x08 && u[3] == 0x00) {
+                        SAOffset nMemoSize = u[4] | (u[5] << 8) | (u[6] << 16) | (u[7] << 24);
+                        if (nMemoSize >= 8) {
+                            nMemoSize -= 8;
+                            if (nMemoSize > nMemoBufferSize)
+                                nMemoSize = nMemoBufferSize;
+                            return psDBF->sHooks.FRead(pszMemoBuffer, 1, 
+                                                       nMemoSize, psDBF->memofp);
+                        }
+                    }
+                }
+            }
+        }
+    }
+    return -1;
+}
+
+/************************************************************************/
 /*                         DBFIsValueNULL()                             */
 /*                                                                      */
 /*      Return TRUE if the passed string is NULL.                       */
@@ -2085,7 +2184,7 @@
         free(pszHeaderNew);
         free(pszRecord);
         free(pszRecordNew);
-        psDBF->sHooks.Error("Out of memory");
+        psDBF->sHooks.Error("Out of memory", psDBF->sHooks.pvUserData);
         return FALSE;
     }
 
diff -bur ./shapelib-orig/safileio.c ./shapelib/safileio.c
--- ./shapelib-orig/safileio.c	2024-12-21 14:33:34.041000000 +0200
+++ ./shapelib/safileio.c	2025-01-18 10:49:48.957938758 +0200
@@ -83,8 +83,9 @@
     return remove(filename);
 }
 
-static void SADError(const char *message)
+static void SADError(const char *message, void *pvUserData)
 {
+    (void)pvUserData;
     fprintf(stderr, "%s\n", message);
 }
 
@@ -101,6 +102,7 @@
 
     psHooks->Error = SADError;
     psHooks->Atof = atof;
+    psHooks->bKeepFileExtension = 0;
     psHooks->pvUserData = SHPLIB_NULLPTR;
 }
 
@@ -182,6 +184,7 @@
 
     psHooks->Error = SADError;
     psHooks->Atof = atof;
+    psHooks->bKeepFileExtension = 0;
     psHooks->pvUserData = SHPLIB_NULLPTR;
 }
 #endif
diff -bur ./shapelib-orig/shapefil.h ./shapelib/shapefil.h
--- ./shapelib-orig/shapefil.h	2024-12-21 14:33:34.041000000 +0200
+++ ./shapelib/shapefil.h	2025-02-22 17:20:32.214343568 +0200
@@ -146,8 +146,9 @@
         int (*FClose)(SAFile file);
         int (*Remove)(const char *filename, void *pvUserData);
 
-        void (*Error)(const char *message);
+        void (*Error)(const char *message, void *pvUserData);
         double (*Atof)(const char *str);
+        int bKeepFileExtension;
         void *pvUserData;
     } SAHooks;
 
@@ -425,6 +426,11 @@
 
         SAFile fp;
 
+        SAFile memofp;        
+
+        unsigned char nFileType;
+        unsigned int nMemoBlockSize;
+       
         int nRecords;
 
         int nRecordLength; /* Must fit on uint16 */
@@ -534,6 +540,8 @@
         DBFReadLogicalAttribute(DBFHandle hDBF, int iShape, int iField);
     SHPDate SHPAPI_CALL DBFReadDateAttribute(DBFHandle hDBF, int iShape,
                                              int iField);
+    SAOffset DBFReadMemoAttribute(DBFHandle psDBF, int iShape, int iField,
+                                  unsigned char * pszMemoBuffer, SAOffset nMemoBufferSize);
     int SHPAPI_CALL DBFIsAttributeNULL(const DBFHandle hDBF, int iShape,
                                        int iField);
 
