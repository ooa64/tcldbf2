diff -bur ./shapelib-orig/dbfopen.c ./shapelib/dbfopen.c
--- ./shapelib-orig/dbfopen.c	2024-12-21 14:33:34.041000000 +0200
+++ ./shapelib/dbfopen.c	2025-01-18 12:03:44.781013116 +0200
@@ -169,7 +169,7 @@
                     szMessage, sizeof(szMessage),
                     "Failure seeking to position before writing DBF record %d.",
                     psDBF->nCurrentRecord);
-                psDBF->sHooks.Error(szMessage);
+                psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
                 return false;
             }
         }
@@ -180,7 +180,7 @@
             char szMessage[128];
             snprintf(szMessage, sizeof(szMessage),
                      "Failure writing DBF record %d.", psDBF->nCurrentRecord);
-            psDBF->sHooks.Error(szMessage);
+            psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
             return false;
         }
 
@@ -223,7 +223,7 @@
             snprintf(szMessage, sizeof(szMessage),
                      "fseek(%ld) failed on DBF file.",
                      STATIC_CAST(long, nRecordOffset));
-            psDBF->sHooks.Error(szMessage);
+            psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
             return false;
         }
 
@@ -233,7 +233,7 @@
             char szMessage[128];
             snprintf(szMessage, sizeof(szMessage),
                      "fread(%d) failed on DBF file.", psDBF->nRecordLength);
-            psDBF->sHooks.Error(szMessage);
+            psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
             return false;
         }
 
@@ -368,10 +368,12 @@
         free(pszFullname);
         return SHPLIB_NULLPTR;
     }
-    psDBF->fp = psHooks->FOpen(pszFullname, pszAccess, psHooks->pvUserData);
+    psDBF->fp = psHooks->FOpen(
+        psHooks->bKeepFileExtension ? pszFilename : pszFullname,
+        pszAccess, psHooks->pvUserData);
     memcpy(&(psDBF->sHooks), psHooks, sizeof(SAHooks));
 
-    if (psDBF->fp == SHPLIB_NULLPTR)
+    if (psDBF->fp == SHPLIB_NULLPTR && !psHooks->bKeepFileExtension)
     {
         memcpy(pszFullname + nLenWithoutExtension, ".DBF", 5);
         psDBF->fp =
@@ -681,7 +683,9 @@
     /* -------------------------------------------------------------------- */
     /*      Create the file.                                                */
     /* -------------------------------------------------------------------- */
-    SAFile fp = psHooks->FOpen(pszFullname, "wb+", psHooks->pvUserData);
+    SAFile fp = psHooks->FOpen(
+         psHooks->bKeepFileExtension ? pszFilename : pszFullname,
+        "wb+", psHooks->pvUserData);
     if (fp == SHPLIB_NULLPTR)
     {
         free(pszFullname);
@@ -828,7 +832,7 @@
                  "Cannot add field %s. Header length limit reached "
                  "(max 65535 bytes, 2046 fields).",
                  pszFieldName);
-        psDBF->sHooks.Error(szMessage);
+        psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
         return -1;
     }
 
@@ -848,7 +852,7 @@
                  "Cannot add field %s. Record length limit reached "
                  "(max 65535 bytes).",
                  pszFieldName);
-        psDBF->sHooks.Error(szMessage);
+        psDBF->sHooks.Error(szMessage, psDBF->sHooks.pvUserData);
         return -1;
     }
 
@@ -903,7 +907,7 @@
     if (!panFieldOffsetNew || !panFieldSizeNew || !panFieldDecimalsNew ||
         !pachFieldTypeNew || !pszHeaderNew || !pszCurrentRecordNew)
     {
-        psDBF->sHooks.Error("Out of memory");
+        psDBF->sHooks.Error("Out of memory", psDBF->sHooks.pvUserData);
         return -1;
     }
 
@@ -914,7 +918,7 @@
         pszRecord = STATIC_CAST(char *, malloc(psDBF->nRecordLength + nWidth));
         if (!pszRecord)
         {
-            psDBF->sHooks.Error("Out of memory");
+            psDBF->sHooks.Error("Out of memory", psDBF->sHooks.pvUserData);
             return -1;
         }
     }
@@ -2071,7 +2075,7 @@
         free(pszHeaderNew);
         free(pszRecord);
         free(pszRecordNew);
-        psDBF->sHooks.Error("Out of memory");
+        psDBF->sHooks.Error("Out of memory", psDBF->sHooks.pvUserData);
         return FALSE;
     }
 
diff -bur ./shapelib-orig/safileio.c ./shapelib/safileio.c
--- ./shapelib-orig/safileio.c	2024-12-21 14:33:34.041000000 +0200
+++ ./shapelib/safileio.c	2025-01-18 10:49:48.957938758 +0200
@@ -83,8 +83,9 @@
     return remove(filename);
 }
 
-static void SADError(const char *message)
+static void SADError(const char *message, void *pvUserData)
 {
+    (void)pvUserData;
     fprintf(stderr, "%s\n", message);
 }
 
@@ -101,6 +102,7 @@
 
     psHooks->Error = SADError;
     psHooks->Atof = atof;
+    psHooks->bKeepFileExtension = 0;
     psHooks->pvUserData = SHPLIB_NULLPTR;
 }
 
@@ -182,6 +184,7 @@
 
     psHooks->Error = SADError;
     psHooks->Atof = atof;
+    psHooks->bKeepFileExtension = 0;
     psHooks->pvUserData = SHPLIB_NULLPTR;
 }
 #endif
diff -bur ./shapelib-orig/shapefil.h ./shapelib/shapefil.h
--- ./shapelib-orig/shapefil.h	2024-12-21 14:33:34.041000000 +0200
+++ ./shapelib/shapefil.h	2025-01-18 10:49:48.957938758 +0200
@@ -146,8 +146,9 @@
         int (*FClose)(SAFile file);
         int (*Remove)(const char *filename, void *pvUserData);
 
-        void (*Error)(const char *message);
+        void (*Error)(const char *message, void *pvUserData);
         double (*Atof)(const char *str);
+        int bKeepFileExtension;
         void *pvUserData;
     } SAHooks;
 
Лише у ./shapelib: shapelib.patch
Лише у ./shapelib: shapelib.patch1
